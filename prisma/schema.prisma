generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Replace with your database provider
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  password       String
  role           Role          @default(STUDENT)
  profilePicture String?
  videos         Video[]       @relation("UploadedVideos")
  coursesCreated Course[]      @relation("CreatedCourses")
  enrollments    Enrollment[]
  reviews        Review[]
  comments       Comment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Course {
  id          String        @id @default(uuid())
  title       String
  description String?
  category    String
  thumbnail   String?
  createdBy   User          @relation("CreatedCourses", fields: [createdById], references: [id])
  createdById String
  enrollments Enrollment[]
  reviews     Review[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Video {
  id          String   @id @default(uuid())
  title       String
  url         String
  category    String
  thumbnail   String?
  description String?
  duration    Int
  uploadedBy  User     @relation("UploadedVideos", fields: [uploadedById], references: [id])
  uploadedById String
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Enrollment {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    String
  completed   Boolean   @default(false)
  enrolledAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id       String   @id @default(uuid())
  video    Video    @relation(fields: [videoId], references: [id])
  videoId  String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  comment  String
  timestamp DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  review    String
  rating    Int      @default(1)
  timestamp DateTime @default(now())
}

enum Role {
  STUDENT
  ADMIN
}
